
#
#                       The code for the memctrl program.
#
#
# ============================================================================
#
#                               Program Ports
#

port input  uart_interrupt
  
port input  s_axi_aclk
port input  s_axi_aresetn
port output s_axi_awaddr    [31:0]
port output s_axi_awvalid
port input  s_axi_awready
port output s_axi_wdata     [31:0]
port output s_axi_wstrb     [3:0]
port output s_axi_wvalid
port input  s_axi_wready
port input  s_axi_bresp     [1:0]
port input  s_axi_bvalid
port output s_axi_bready
port output s_axi_araddr    [3:0]
port output s_axi_arvalid
port input  s_axi_arready
port input  s_axi_rdata     [31:0]
port input  s_axi_rresp     [1:0]
port input  s_axi_rvalid
port output s_axi_rready

# ============================================================================
#
#                           Program State Variables
#

state   scratch_0
state   scratch_1
state   scratch_2
state   scratch_3
state   tmp_data            [7:0]
state   op_counter          [7:0]


# ============================================================================
#
# Execution starts here. Setup the outputs of the core and then jump into
# The idle loop.
#
block main

    set     s_axi_awaddr    0
    set     s_axi_awvalid   0
    set     s_axi_wdata     0
    set     s_axi_wstrb     0
    set     s_axi_wvalid    0
    set     s_axi_bready    0
    set     s_axi_araddr    0
    set     s_axi_arvalid   0
    set     s_axi_rready    0

    goto    configure_uart


# ----------------------------------------------------------------------------
#
# Configure the UART block
#
block configure_uart

    goto idle_loop


# ----------------------------------------------------------------------------
#
# Wait in this block for an interrupt from the UART module.
#
block idle_loop
    
    ifnez   uart_interrupt  read_uart_cmd
    goto    idle_loop


# ----------------------------------------------------------------------------
#
# Read the recieved data from the UART module.
#
block read_uart_cmd
    set     s_axi_araddr    32'hFAB0_0000
    setifel s_axi_arvalid   s_axi_arready   1'b0    1'b1
    ifeqz   s_axi_arready   read_uart_cmd
    ifnez   s_axi_arready   read_uart_cmd_rsp

block read_uart_cmd_rsp
    cpy_b0  tmp_data       s_axi_rdata
    set     s_axi_rready   s_axi_rvalid
    ifeqz   s_axi_rvalid   read_uart_cmd_rsp
    ifnez   s_axi_rvalid   decode_uart_cmd


# ----------------------------------------------------------------------------
#
# Based on the command, branch to one of the procedures. If it is not a
# valid command, jump back to the idle loop and ignore it.
# 
#       Command |   Action
#       --------|------------------------
#       8'h00   | NOP - Do nothing
#       8'h01   | Set address pointer
#       8'h02   | Set counter
#       8'h04   | Start memory write sequence
#       8'h08   | Start memory read sequence
#
block decode_uart_cmd
    msk     scratch_0        tmp_data   8'h01
    msk     scratch_1        tmp_data   8'h02
    msk     scratch_2        tmp_data   8'h04
    msk     scratch_3        tmp_data   8'h08

    block call_cmd

        ifnez   scratch_0       proc_set_addr_pointer
        ifnez   scratch_1       proc_set_counter
        ifnez   scratch_2       proc_uart_to_mem
        ifnez   scratch_3       proc_mem_to_uart
        goto    idle_loop

# ============================================================================
#
# Procedure for setting the value of the byte address pointer.
#
#   The address is 32-bits wide, so we wait for the next four bytes to be
#   recieved and shift in the address into the pointer register. We
#   expect the MS byte first, and for the address to be in little endian.
#
block proc_set_addr_pointer

    goto    idle_loop


# ============================================================================
#
# Procedure for setting the operation counter variable.
# Wait for the next byte to be recieved and set the counter to that value.
#
block proc_set_counter

    goto    idle_loop


# ============================================================================
#
# Procedure for transfering data from the UART port and into system memory.
#
block proc_uart_to_mem

    goto    idle_loop


# ============================================================================
#
# Procedure for transfering data from system memory and into UART.
#
block proc_mem_to_uart

    goto    idle_loop


